const HtmlWebpackPlugin = require('html-webpack-plugin'); //plugin - generate an HTML5 file that includes all your webpack bundles
const path = require('path');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');


module.exports = {
    entry: {
        main: path.resolve(__dirname, './src/app.js'),
    },  
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: '[name].bundle.js',  //unique name, eg: (main.30a6bh.bundle.js) , [name]=main, [contenthash]=some43random24
        //assetModuleFilename: '[name][ext]', //whatever the asset name is
        //clean: true, //cleans the dist folder
    },
    //devtool: 'inline-source-map', 
    // devServer: {
    //     port: 5001, //default 8080
    //     open: true,
    //     hot: true, //automatic refresh when updated
    //     //watchFiles: [path.resolve(__dirname, 'src')],
    // },
    devServer: {
        static: {
          directory: path.join(__dirname, 'dist'),
        },
        compress: true,
        port: 5001,
    },

    //Loaders
    module: {
        rules: [
            //js for babel
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: { //use - tells which loader(s) should be used against the matched modules
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env']
                    }
                }
            },
            //css
            { 
                test: /\.css$/, 
                use: ["style-loader", "css-loader"] //They’re evaluated in reverse order — that is, from right to left and from bottom to top
            },
            //images
            {
                test: /\.(svg|ico|png|webp|jpg|gif|jpeg)$/i,
                type: 'asset/resource',
            },

            {
                test: /\.html$/i,
                loader: "html-loader",
            },

            //{ test: /\.handlebars$/, loader: "handlebars-loader" },

            {
                test: /\.handlebars$/,
                use: 'handlebars-loader',
                exclude: /node_modules/
            }, //for using {{ }} code in .html file
        ],
    },

    //Plugins
    plugins: [
        //new HtmlWebpackPlugin({title: 'just a demo',}),
        new HtmlWebpackPlugin({
            title: 'just a demo2',
            filename: 'index.html', //index.html will be created in dist, includes all scripts in it
            template: path.resolve(__dirname, 'src/temp.handlebars'), //if we want html that isn't want completely generated by javascript, if we want to have some html at the start, we can actually create a template to use as our page
        }), 
        
        new CleanWebpackPlugin(),
    ],
};
